pip install Flask Flask-SQLAlchemy

from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///milestones.db'
db = SQLAlchemy(app)

class Milestone(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(50), nullable=False)
    description = db.Column(db.String(200))
    status = db.Column(db.String(20), default='Not Started')

# Create the database
db.create_all()

# Routes
@app.route('/milestones', methods=['GET'])
def get_milestones():
    milestones = Milestone.query.all()
    output = []
    for milestone in milestones:
        milestone_data = {
            'id': milestone.id,
            'title': milestone.title,
            'description': milestone.description,
            'status': milestone.status
        }
        output.append(milestone_data)
    return jsonify({'milestones': output})

@app.route('/milestones/<milestone_id>', methods=['GET'])
def get_milestone(milestone_id):
    milestone = Milestone.query.get(milestone_id)
    if milestone:
        milestone_data = {
            'id': milestone.id,
            'title': milestone.title,
            'description': milestone.description,
            'status': milestone.status
        }
        return jsonify({'milestone': milestone_data})
    else:
        return jsonify({'message': 'Milestone not found'}), 404

@app.route('/milestones', methods=['POST'])
def create_milestone():
    data = request.get_json()
    new_milestone = Milestone(title=data['title'], description=data['description'])
    db.session.add(new_milestone)
    db.session.commit()
    return jsonify({'message': 'Milestone created successfully'}), 201

@app.route('/milestones/<milestone_id>', methods=['PUT'])
def update_milestone(milestone_id):
    milestone = Milestone.query.get(milestone_id)
    if milestone:
        data = request.get_json()
        milestone.title = data['title']
        milestone.description = data['description']
        milestone.status = data['status']
        db.session.commit()
        return jsonify({'message': 'Milestone updated successfully'})
    else:
        return jsonify({'message': 'Milestone not found'}), 404

@app.route('/milestones/<milestone_id>', methods=['DELETE'])
def delete_milestone(milestone_id):
    milestone = Milestone.query.get(milestone_id)
    if milestone:
        db.session.delete(milestone)
        db.session.commit()
        return jsonify({'message': 'Milestone deleted successfully'})
    else:
        return jsonify({'message': 'Milestone not found'}), 404

if __name__ == '__main__':
    app.run(debug=True)

Flask==2.0.1
Flask-SQLAlchemy==3.0.0

services:
  - name: milestones-api
    env:
      DATABASE_URL: "sqlite:///milestones.db"

railway up

pip install flask-admin

from flask_admin import Admin
from flask_admin.contrib.sqla import ModelView

admin = Admin(app, name='Milestone Dashboard', template_mode='bootstrap3')
admin.add_view(ModelView(Milestone, db.session))

if __name__ == '__main__':
    app.run(debug=True)


